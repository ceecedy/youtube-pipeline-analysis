{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.9", "generated_at": "2024-11-30T02:20:19.608839Z", "invocation_id": "19af09f6-1723-46f1-9762-3e4977f1dce3", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-11-30T02:20:15.269106Z", "completed_at": "2024-11-30T02:20:15.276487Z"}, {"name": "execute", "started_at": "2024-11-30T02:20:15.276774Z", "completed_at": "2024-11-30T02:20:19.600849Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 4.332785129547119, "adapter_response": {"_message": "CREATE TABLE (11.0 rows, 4.5 KiB processed)", "code": "CREATE TABLE", "rows_affected": 11, "bytes_processed": 4610, "bytes_billed": 10485760, "location": "US", "project_id": "yt-e2e-data-cycle-project", "job_id": "76d1a64c-e1c5-4ff7-8a20-b4edaa9168d2", "slot_ms": 15955}, "message": "CREATE TABLE (11.0 rows, 4.5 KiB processed)", "failures": null, "unique_id": "model.youtube_project.dim_categories", "compiled": true, "compiled_code": "WITH category_data AS (\n    SELECT * \n    FROM `yt-e2e-data-cycle-project`.`youtube`.`staging_category`\n),\n\ncategory_lookup AS (\n    SELECT \n        category_struct.category_id,\n        category_struct.category_name,\n        category_struct.category_description\n    FROM UNNEST([\n        STRUCT(1 AS category_id, 'Film & Animation' AS category_name, 'Videos related to film and animation.' AS category_description),\n        STRUCT(2 AS category_id, 'Autos & Vehicles' AS category_name, 'Videos related to cars, trucks, motorcycles, and vehicles.' AS category_description),\n        STRUCT(10 AS category_id, 'Music' AS category_name, 'Videos related to music, music videos, and performances.' AS category_description),\n        STRUCT(15 AS category_id, 'Pets & Animals' AS category_name, 'Videos related to pets, animals, and wildlife.' AS category_description),\n        STRUCT(17 AS category_id, 'Sports' AS category_name, 'Videos related to sports events, commentary, and athletics.' AS category_description),\n        STRUCT(18 AS category_id, 'Short Movies' AS category_name, 'Short films and independent films.' AS category_description),\n        STRUCT(19 AS category_id, 'Travel & Events' AS category_name, 'Videos related to travel and live events.' AS category_description),\n        STRUCT(20 AS category_id, 'Gaming' AS category_name, 'Videos related to video games, game commentary, and more.' AS category_description),\n        STRUCT(22 AS category_id, 'People & Blogs' AS category_name, 'Personal vlogs and commentary.' AS category_description),\n        STRUCT(23 AS category_id, 'Comedy' AS category_name, 'Videos related to comedic content.' AS category_description),\n        STRUCT(24 AS category_id, 'Entertainment' AS category_name, 'Content related to entertainment and celebrity culture.' AS category_description),\n        STRUCT(25 AS category_id, 'News & Politics' AS category_name, 'News and political commentary or events.' AS category_description),\n        STRUCT(26 AS category_id, 'Howto & Style' AS category_name, 'How-to videos and style-related content.' AS category_description),\n        STRUCT(27 AS category_id, 'Education' AS category_name, 'Educational content for various fields and topics.' AS category_description),\n        STRUCT(28 AS category_id, 'Science & Technology' AS category_name, 'Videos related to science, tech, and innovations.' AS category_description),\n        STRUCT(29 AS category_id, 'Nonprofits & Activism' AS category_name, 'Content related to nonprofits, activism, and charitable causes.' AS category_description),\n        STRUCT(30 AS category_id, 'Movies' AS category_name, 'Full-length movies, movie trailers, and related content.' AS category_description),\n        STRUCT(31 AS category_id, 'Anime & Animation' AS category_name, 'Anime series, animation, and related content.' AS category_description),\n        STRUCT(32 AS category_id, 'Action & Adventure' AS category_name, 'Videos related to action and adventure content.' AS category_description),\n        STRUCT(33 AS category_id, 'Classics' AS category_name, 'Classic movies, TV shows, and content.' AS category_description),\n        STRUCT(34 AS category_id, 'Documentaries' AS category_name, 'Documentaries and docuseries content.' AS category_description),\n        STRUCT(35 AS category_id, 'Drama' AS category_name, 'Dramas, TV shows, and related content.' AS category_description),\n        STRUCT(36 AS category_id, 'Family & Parenting' AS category_name, 'Videos related to family life and parenting.' AS category_description),\n        STRUCT(37 AS category_id, 'Home & Garden' AS category_name, 'Content about home improvement, gardens, and DIY projects.' AS category_description),\n        STRUCT(38 AS category_id, 'Lifestyle' AS category_name, 'Videos about lifestyle, health, wellness, and more.' AS category_description),\n        STRUCT(39 AS category_id, 'Music Videos' AS category_name, 'Music video content, including live and pre-recorded.' AS category_description),\n        STRUCT(40 AS category_id, 'Reality TV' AS category_name, 'Reality TV shows and unscripted content.' AS category_description)\n    ]) AS category_struct\n)\n\n, deduplicated_categories AS (\n    SELECT \n        c.category_id,\n        COALESCE(l.category_name, c.category_name, 'Unknown Category') AS category_name,\n        COALESCE(l.category_description, c.category_description, 'Description not found') AS category_description,\n        ROW_NUMBER() OVER (PARTITION BY c.category_id ORDER BY c.category_id) AS row_num\n    FROM category_data c\n    LEFT JOIN category_lookup l\n        ON c.category_id = l.category_id\n)\n\nSELECT\n    category_id,\n    category_name,\n    category_description\nFROM\n    deduplicated_categories\nWHERE\n    row_num = 1  -- Only keep the first row for each category_id\nORDER BY\n    category_id", "relation_name": "`yt-e2e-data-cycle-project`.`youtube`.`dim_categories`"}], "elapsed_time": 5.9686033725738525, "args": {"write_json": true, "project_dir": "/usr/local/airflow/include/dbt", "select": ["youtube_data.marts.dim_categories"], "static_parser": true, "log_path": "/usr/local/airflow/include/dbt/logs", "partial_parse_file_diff": true, "printer_width": 80, "introspect": true, "empty": false, "log_level": "info", "log_format_file": "debug", "invocation_command": "dbt run --models youtube_data.marts.dim_categories", "send_anonymous_usage_stats": true, "partial_parse": true, "macro_debugging": false, "use_colors": true, "which": "run", "log_format": "default", "indirect_selection": "eager", "log_file_max_bytes": 10485760, "print": true, "strict_mode": false, "quiet": false, "warn_error_options": {"include": [], "exclude": []}, "require_resource_names_without_spaces": false, "show_resource_report": false, "defer": false, "populate_cache": true, "vars": {}, "favor_state": false, "profiles_dir": "/usr/local/airflow/include/dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "enable_legacy_logger": false, "source_freshness_run_project_hooks": false, "log_level_file": "debug", "cache_selected_only": false, "version_check": true, "exclude": [], "use_colors_file": true}}